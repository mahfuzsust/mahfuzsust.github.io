[{"title":"Longest Palindromic Substring","url":"/2023/10/15/longest-palindromic-substring/","content":"<p>Given a string s, return the longest palindromic substring in s.</p>\n<p>A string is called a palindrome string if the reverse of that string is the same as the original string.</p>\n<p>Example 1:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: s = &quot;babad&quot;</span><br><span class=\"line\">Output: &quot;bab&quot;</span><br><span class=\"line\">Explanation: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>There are multiple ways to solve the problem. First we should try to start with the basic brute-force solution.</p>\n<h3 id=\"Brute-force-solution\"><a href=\"#Brute-force-solution\" class=\"headerlink\" title=\"Brute-force solution\"></a>Brute-force solution</h3><p>In this way we will be checking all the possible substring and check if that’s a palindrome. Taking the example, <code>babad</code> the substrings will be (<code>b</code>, <code>ba</code>, <code>bad</code>, <code>baba</code>, <code>babad</code>, <code>a</code>, <code>ab</code>, <code>aba</code>, <code>abad</code>, <code>b</code>, <code>ba</code>, <code>bad</code>, <code>a</code>, <code>ad</code>). For all the substrings we have to check if that’s a palindrome or not.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">If palindrome, </span><br><span class=\"line\">    compare the length if it&#x27;s the largest</span><br><span class=\"line\"></span><br><span class=\"line\">    if largest</span><br><span class=\"line\">      store the value in a variable</span><br></pre></td></tr></table></figure>\n\n<p>To check if palindrome</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start == end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[start++] != arr[end--]) <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now we generate all the substrings and then check if palindrome or not.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr = s.toCharArray();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    String ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = arr.length - <span class=\"number\">1</span>; j &gt;= i; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isPalindrome(arr, i, j)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> len = j - i;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(len &gt; max) &#123;</span><br><span class=\"line\">                    max = len;</span><br><span class=\"line\">                    ans = <span class=\"keyword\">new</span> String(arr, i, j-i+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To generate the substring the complexity is \\(O(n^2)\\) and for each substring checking palindrome take \\(O(n)\\). In total the complexity of the solution is \\(O(n^3)\\)</p>\n<h3 id=\"Dynamic-programming\"><a href=\"#Dynamic-programming\" class=\"headerlink\" title=\"Dynamic programming\"></a>Dynamic programming</h3><p>The brute-force solution works for solving the problem. Now we have to make the solution a bit better. We can see in our <code>isPalindrome</code> funtion we check for same substring if palindrome or not. We are going to store the value and reuse it so that we do not have to check again. We are solving the problem by using the result from our subproblem. Let’s say, for string <code>ababa</code>, it’s a palindrome if first and last character is same and the <code>bab</code> substring is palindrome.</p>\n<p>We will take a \\((n*n)\\) boolean array to store values for each substring. <code>start</code> will be representing row and <code>end</code> will represent the column.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if start == end, means the same character will set true</span><br><span class=\"line\">if arr[start] == arr[end] </span><br><span class=\"line\">    if end - start == 1; set true</span><br><span class=\"line\">    else set value from arr[start + 1][end - 1]  // (for `ababa` set value of `bab`)</span><br></pre></td></tr></table></figure>\n\n<p>Let’s write the solution.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = s.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    String ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == j) dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i] == arr[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j - i == <span class=\"number\">1</span>) dp[i][j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    dp[i][j] = dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = j - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dp[i][j] &amp;&amp; len &gt; max) &#123;</span><br><span class=\"line\">                max = len;</span><br><span class=\"line\">                ans = <span class=\"keyword\">new</span> String(arr,i, len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this solution we are building our boolean \\((n*n)\\) in bottom up approach. For our example <code>cbaba</code> from last the order of substring will be </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(4,4) -&gt; a -&gt; i == j -&gt; true</span><br><span class=\"line\">(3,3) -&gt; b -&gt; i == j -&gt; true</span><br><span class=\"line\">(3,4) -&gt; ba -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(2,2) -&gt; a -&gt; i == j -&gt; true</span><br><span class=\"line\">(2,3) -&gt; ab -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(2,4) -&gt; aba -&gt; arr[i] == arr[j] -&gt; (3, 3) -&gt; true</span><br><span class=\"line\">(1,1) -&gt; b -&gt; i == j -&gt; true</span><br><span class=\"line\">(1,2) -&gt; ba -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(1,3) -&gt; bab -&gt; arr[i] == arr[j] -&gt; (2, 2) -&gt; true</span><br><span class=\"line\">(1,4) -&gt; baba -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(0,0) -&gt; c -&gt; i == j -&gt; true</span><br><span class=\"line\">(0,1) -&gt; cb -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(0,2) -&gt; cba -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(0,3) -&gt; cbab -&gt; arr[i] != arr[j] -&gt; false</span><br><span class=\"line\">(0,4) -&gt; cbaba -&gt; arr[i] != arr[j] -&gt; false</span><br></pre></td></tr></table></figure>\n\n<p>if the result value is true, we will then check if the length is longest or not. We will store the longest string in a variable and after the loop is finished we will get the result.</p>\n<p>We just removed the use of <code>isPalindrome</code> function here but the loop will remain the same. So, for this solution the complexity will be \\(O(n^2)\\). But in this case we are using an extra memory to store the values and that’s why we will have an extra \\(O(n^2)\\) memory.</p>\n<h3 id=\"Expand-around-the-center\"><a href=\"#Expand-around-the-center\" class=\"headerlink\" title=\"Expand around the center\"></a>Expand around the center</h3><p>In the brute-force approach, we checked if the string is palindrome by starting from both the edges and traverse to center. In this approach we will start from the center expand one by one level to check if the string is palindrome. For example, in <code>atoyota</code> we will start with <code>y</code> then <code>oyo</code>, <code>toyot</code> and lastly <code>atoyota</code>. Here for every position we will expand and check if palindrome or not.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">expand</span><span class=\"params\">(<span class=\"keyword\">char</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(start &gt;= <span class=\"number\">0</span> &amp;&amp; end &lt; arr.length &amp;&amp; arr[start] == arr[end]) &#123;</span><br><span class=\"line\">        start--;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(arr, start+<span class=\"number\">1</span>, (end - <span class=\"number\">1</span>) - (start + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we call this <code>expand</code> function, we’ll get the longest palindrome of that position.<br>(<code>atoyota</code>, 3, 3) -&gt; <code>atoyota</code><br>(<code>aba</code>, 1, 1) -&gt; <code>aba</code><br>We can see it’s working for odd length string with giving the same position. For even length, we have to pass two positions(including the next) to keep it working.<br>(<code>abba</code>, 1, 2) -&gt; <code>abba</code><br>(<code>cc</code>, 0, 1) -&gt; <code>cc</code></p>\n<p>The next step will be loop through all the positions in the string to get the longest palindrome.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestPalindrome</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.length() &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] arr = s.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    String ans = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        String x = expand(arr, i, i);     <span class=\"comment\">// Odd </span></span><br><span class=\"line\">        String y = expand(arr, i, i+<span class=\"number\">1</span>);   <span class=\"comment\">// Even (add the next position i+1)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = Math.max(x.length(), y.length());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len &gt; max) &#123;</span><br><span class=\"line\">            max = len;</span><br><span class=\"line\">            ans = len == x.length() ? x : y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this approach, we are only looping through the length of the string and expanding to the edge. For looping through all the positions the complexity will be \\( O(n) \\) and to expand the complexity is \\( O(n) \\). The total complexity of the solution is \\( O(n^2) \\) and having the memory complexity of \\( O(n) \\). The time complexity is similar to our dynamic programming solution but the advantage is the memory complexity.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>There is also another algorithm named <a href=\"https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm\">Manacher’s Algorithm</a> where the complexity is \\( O(n) \\).  </p>\n","categories":["leetcode"],"tags":["algorithm","java"]},{"title":"AVL (Balanced Binary Search Tree)","url":"/2021/08/05/balanced-binary-tree/","content":"<p><img src=\"https://miro.medium.com/max/2000/1*ic9Ou8ZXZeiADVCXpOaKIw.jpeg\" alt=\"Binary Search Tree\"></p>\n<p>In our previous post(<a href=\"https://www.mahfuz.info/2021/07/27/binary-search-tree/\">Binary Search Tree</a>), we have discussed binary search trees. We have checked out the insertion, deletion, and find operation for a BST.</p>\n<p>In the best-case scenario, BST can provide O(log n) complexity but in the worst-case scenario, this gives us O(n) complexity. The worst-case can happen if the input data is sorted in any order. To prevent the worst case, there are extensions that can help us maintain the binary tree balanced and get the best outcome. Some of them are,</p>\n<ul>\n<li>AVL tree</li>\n<li>Red black tree</li>\n<li>Treap</li>\n<li>B-tree</li>\n</ul>\n<p>Today, we will discuss the height-balanced AVL tree.</p>\n<h2 id=\"AVL-tree\"><a href=\"#AVL-tree\" class=\"headerlink\" title=\"AVL tree\"></a>AVL tree</h2><p>AVL tree is an extension of the binary search tree. It has an additional field called the balance factor. After insert, delete, or modification operation, it always checks the balance factor of each node.</p>\n<p>Based on the value of the balance factor, the tree self-balances itself.</p>\n<h2 id=\"Balance-factor\"><a href=\"#Balance-factor\" class=\"headerlink\" title=\"Balance factor\"></a>Balance factor</h2><p>The balance factor of a node in an AVL tree is the difference between the height of the left subtree and the height of the right subtree of that node.<br>Balance factor = Height of Left Subtree — Height of Right Subtree (or inverse)<br>The value of the balance factor should always be [-1, 0 or+1]</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> T key;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> TreeNode&lt;T&gt; parent;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> TreeNode&lt;T&gt; left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> TreeNode&lt;T&gt; right;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> height;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balanceFactor;</span><br><span class=\"line\">  <span class=\"comment\">// getter / setter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateBalanceFactor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    left = <span class=\"keyword\">this</span>.left.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    right = <span class=\"keyword\">this</span>.right.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = Math.max(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.balanceFactor = left - right;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBalanced</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getBalanceFactor() &lt;= <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">this</span>.getBalanceFactor() &gt;= -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We will use a callback pattern for our AVL tree insert and delete methods.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">success</span><span class=\"params\">(T value)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We have already discussed BST implementation in our previous post. We will extend the insert and delete operation here to maintain AVL properties.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T key, Callback&lt;TreeNode&lt;T&gt;&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    callback.success(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T key, Callback&lt;TreeNode&lt;T&gt;&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    callback.success(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AVL-implementation\"><a href=\"#AVL-implementation\" class=\"headerlink\" title=\"AVL implementation\"></a>AVL implementation</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVL</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"keyword\">extends</span> <span class=\"title\">BST</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(T key, Callback&lt;TreeNode&lt;T&gt;&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.insert(key, (node) -&gt; &#123;</span><br><span class=\"line\">      fixAVLProperties(node, node.getKey());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callback.success(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(T key, Callback&lt;TreeNode&lt;T&gt;&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.delete(key, (node) -&gt; &#123;</span><br><span class=\"line\">      TreeNode&lt;T&gt; parent = node.getParent();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        parent = root;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      updateChildBalanceFactor(parent);</span><br><span class=\"line\">      TreeNode&lt;T&gt; unbalancedNode = getUnbalancedNode(parent);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (unbalancedNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        T unbalancedKey = getUnbalancedKey(unbalancedNode);</span><br><span class=\"line\">        fixAVLProperties(unbalancedNode, unbalancedKey);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        callback.success(node);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>After the binary search tree insertion, we need to update the balance factor of each node. As we know we insert in any of the subtrees we are going to check all the way up to the parent to check if every node maintains the AVL properties.<br>If the node is unbalanced, we need to rotate the tree to maintain the balance factor ≤ 1 and ≥ -1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fixAVLProperties</span><span class=\"params\">(TreeNode&lt;T&gt; node, T key)</span> </span>&#123;</span><br><span class=\"line\">  TreeNode&lt;T&gt; item = node;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    item.updateBalanceFactor();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.isBalanced() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">      applyRotation(item, getUnbalancedDirection(item, key));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    item = item.getParent();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Unbalanced-Node\"><a href=\"#Unbalanced-Node\" class=\"headerlink\" title=\"Unbalanced Node\"></a>Unbalanced Node</h2><p>The subtree can be unbalanced in 4 different ways,</p>\n<ol>\n<li>Left unbalanced (LL)</li>\n<li>Right unbalanced (RR)</li>\n<li>Left Right unbalanced (LR)</li>\n<li>Right unbalanced (RL)</li>\n</ol>\n<p>For these use cases, we have to rotate our tree to maintain our balance properties.</p>\n<p>First, we have to find the unbalanced direction</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getUnbalancedDirection</span><span class=\"params\">(TreeNode&lt;T&gt; node, T key)</span> </span>&#123;</span><br><span class=\"line\">  String str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  TreeNode&lt;T&gt; item = node;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span> || key == item.getKey()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> compareTo = key.compareTo(item.getKey());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareTo &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&quot;L&quot;</span>;</span><br><span class=\"line\">      item = item.getLeft();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&quot;R&quot;</span>;</span><br><span class=\"line\">      item = item.getRight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Next, we have to apply rotation based on the direction</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">applyRotation</span><span class=\"params\">(TreeNode&lt;T&gt; node, String direction)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LEFT:</span><br><span class=\"line\">      rotateRight(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> RIGHT:</span><br><span class=\"line\">      rotateLeft(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LEFT_RIGHT:</span><br><span class=\"line\">      rotateLeft(node.getLeft());</span><br><span class=\"line\">      rotateRight(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> RIGHT_LEFT:</span><br><span class=\"line\">      rotateRight(node.getRight());</span><br><span class=\"line\">      rotateLeft(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Left-rotation\"><a href=\"#Left-rotation\" class=\"headerlink\" title=\"Left rotation\"></a>Left rotation</h2><p>To apply the rotation in left rotation,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rotateLeft</span><span class=\"params\">(TreeNode&lt;T&gt; node)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class=\"line\">      node.getParent().setLeft(node.getRight());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node.getParent().setRight(node.getRight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == node) &#123;</span><br><span class=\"line\">    root = node.getRight();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  TreeNode&lt;T&gt; left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.getRight()!= <span class=\"keyword\">null</span> &amp;&amp; node.getRight().getLeft() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    left = node.getRight().getLeft();</span><br><span class=\"line\">    left.setParent(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node.getRight().setLeft(node);</span><br><span class=\"line\">  node.getRight().setParent(node.getParent());</span><br><span class=\"line\">  node.setParent(node.getRight());</span><br><span class=\"line\">  node.setRight(left);</span><br><span class=\"line\">  updateChildBalanceFactor(node.getParent());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Right-rotation\"><a href=\"#Right-rotation\" class=\"headerlink\" title=\"Right rotation\"></a>Right rotation</h2><p>To apply the rotation in the right rotation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rotateRight</span><span class=\"params\">(TreeNode&lt;T&gt; node)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.getParent() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class=\"line\">      node.getParent().setLeft(node.getLeft());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node.getParent().setRight(node.getLeft());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == node) &#123;</span><br><span class=\"line\">    root = node.getLeft();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  TreeNode&lt;T&gt; right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.getLeft() != <span class=\"keyword\">null</span> &amp;&amp; node.getLeft().getRight() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    right = node.getLeft().getRight();</span><br><span class=\"line\">    right.setParent(node);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  node.getLeft().setRight(node);</span><br><span class=\"line\">  node.getLeft().setParent(node.getParent());</span><br><span class=\"line\">  node.setParent(node.getLeft());</span><br><span class=\"line\">  node.setLeft(right);</span><br><span class=\"line\">  updateChildBalanceFactor(node.getParent());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Update-balance-factor\"><a href=\"#Update-balance-factor\" class=\"headerlink\" title=\"Update balance factor\"></a>Update balance factor</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateChildBalanceFactor</span><span class=\"params\">(TreeNode&lt;T&gt; node)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  updateChildBalanceFactor(node.getLeft());</span><br><span class=\"line\">  updateChildBalanceFactor(node.getRight());</span><br><span class=\"line\">  node.updateBalanceFactor();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Deletion\"><a href=\"#Deletion\" class=\"headerlink\" title=\"Deletion\"></a>Deletion</h2><p>In terms of deletion, we need to check certain steps to determine if the balance factor is appropriate.</p>\n<ol>\n<li>The parent of the deleted node has any child node unbalanced.</li>\n<li>The unbalanced key that will determine the rotation direction</li>\n</ol>\n<p>First, we need to check if any unbalanced node exists or not</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TreeNode&lt;T&gt; <span class=\"title\">getUnbalancedNode</span><span class=\"params\">(TreeNode&lt;T&gt; node)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.isBalanced() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  TreeNode&lt;T&gt; unbalancedNode = getUnbalancedNode(node.getLeft());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (unbalancedNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getUnbalancedNode(node.getRight());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> leftUNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then we have to check the key, for which the node is unbalanced. We just need to check two nodes here and because to find the unbalanced direction two nodes are sufficient.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> T <span class=\"title\">getUnbalancedKey</span><span class=\"params\">(TreeNode&lt;T&gt; node)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span> || node.isBalanced()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  TreeNode&lt;T&gt; item = node;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.getBalanceFactor() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      item = item.getLeft();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      item = item.getRight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item.getKey();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h2><p>We can check our AVL tree using a driver method</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    AVL&lt;Integer&gt; tree = <span class=\"keyword\">new</span> AVL&lt;Integer&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : array) &#123;</span><br><span class=\"line\">      tree.insert(i, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tree.preorder(tree.getRoot(), (x) -&gt; System.out.println(x));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This will make our tree as</p>\n<pre class=\"mermaid\">  graph TD;\n      4-->2;\n      4-->6;\n      2-->1;\n      2-->3;\n      6-->5;\n      6-->9;\n      9-->8;\n      9-->10;</pre>\n\n<p>Full <a href=\"https://gist.github.com/mahfuzsust/e67043588cbf42414ab3ecc0db1412fd\">source code</a> is shared.</p>\n","categories":["Algorithm"],"tags":["binary search tree","algorithm","java","avl"]},{"title":"Fish FZF Configuration","url":"/2021/07/31/fish-fzf-configuration/","content":"<p>FZF is an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc.</p>\n<h2 id=\"Tree\"><a href=\"#Tree\" class=\"headerlink\" title=\"Tree\"></a>Tree</h2><p>Display directories as trees (with optional color/HTML output)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fd\"><a href=\"#fd\" class=\"headerlink\" title=\"fd\"></a>fd</h2><p>Simple, fast and user-friendly alternative to find.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install fd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ripgrep\"><a href=\"#ripgrep\" class=\"headerlink\" title=\"ripgrep\"></a>ripgrep</h2><p>ripgrep is a line-oriented search tool that recursively searches the current directory for a regex pattern.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install ripgrep</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fish\"><a href=\"#fish\" class=\"headerlink\" title=\"fish\"></a>fish</h2><p>User-friendly command-line shell for UNIX-like operating systems.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install fish</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fzf\"><a href=\"#fzf\" class=\"headerlink\" title=\"fzf\"></a>fzf</h2><p>fzf is a general-purpose command-line fuzzy finder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install fzf</span><br><span class=\"line\"></span><br><span class=\"line\"># To install useful key bindings and fuzzy completion:</span><br><span class=\"line\">$(brew --prefix)/opt/fzf/install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FZF-preview\"><a href=\"#FZF-preview\" class=\"headerlink\" title=\"FZF preview\"></a>FZF preview</h2><p>Let’s create a function that will preview file or directory using mentioned tools</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># .config/fish/functions/__fzf_preview.fish</span><br><span class=\"line\"></span><br><span class=\"line\">function __fzf_preview</span><br><span class=\"line\">    if file --mime &quot;$argv&quot; | grep -q directory</span><br><span class=\"line\">        tree -L 3 &quot;$argv&quot;</span><br><span class=\"line\">    else if file --mime &quot;$argv&quot; | grep -q binary</span><br><span class=\"line\">        echo &quot;$argv is a binary file&quot;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        if command --quiet --search bat</span><br><span class=\"line\">            bat --color=always --line-range :250 &quot;$argv&quot;</span><br><span class=\"line\">        else if command --quiet --search cat</span><br><span class=\"line\">            cat &quot;$argv&quot; | head -250</span><br><span class=\"line\">        else</span><br><span class=\"line\">            head -250 &quot;$argv&quot;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>Now change the default option</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set -U FZF_DEFAULT_OPTS &quot; \\</span><br><span class=\"line\">         --multi --cycle --keep-right -1 \\</span><br><span class=\"line\">         --height=80% --layout=reverse --info=default \\</span><br><span class=\"line\">         --preview-window right:50%:wrap \\</span><br><span class=\"line\">         --preview &#x27;__fzf_preview &#123;&#125;&#x27; \\</span><br><span class=\"line\">         --ansi&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h2><p>Let’s make our search faster using fd and ripgrep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set -U FZF_ALT_C_COMMAND &quot;fd -t d . \\$dir&quot;</span><br><span class=\"line\">set -U FZF_CTRL_T_COMMAND &quot;rg --files --no-require-git&quot;</span><br></pre></td></tr></table></figure>\n","categories":["Tools"],"tags":["fish","fzf"]},{"title":"Binary Search Tree","url":"/2021/07/27/binary-search-tree/","content":"<p><img src=\"https://miro.medium.com/max/1400/1*_LqrcGNWChmeXlrsbB5enQ.png\" alt=\"Binary Search Tree (1)\"></p>\n<p>A binary search tree is a tree data structure that stores values in two sub-tree of left and right.</p>\n<h2 id=\"Properties\"><a href=\"#Properties\" class=\"headerlink\" title=\"Properties\"></a>Properties</h2><ul>\n<li>If the node is the left child of its parent, then it must be smaller than (or equal to) the parent</li>\n<li>If the node is the right child of its parent, then it must be larger than the parent.</li>\n<li>All the nodes in the left subtree must be smaller (or equal) than the parent</li>\n<li>All the nodes in the right subtree must be larger than the parent</li>\n</ul>\n<h2 id=\"Tree-node\"><a href=\"#Tree-node\" class=\"headerlink\" title=\"Tree node\"></a>Tree node</h2><p>This is the tree node that will store our tree structure data.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Tree parent;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Tree left;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Tree right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// getters + setters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generate\"><a href=\"#Generate\" class=\"headerlink\" title=\"Generate\"></a>Generate</h2><p>We can add a method to generate a tree from an array or a collection of items</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">generate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        insert(array[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Insert\"><a href=\"#Insert\" class=\"headerlink\" title=\"Insert\"></a>Insert</h2><p>While inserting an entry to our tree, we need to find the position to fit. Entry will always be the leaf node considering the properties of a binary search tree. We have to search through the tree from the root to find an appropriate position of the newly inserted node.</p>\n<ul>\n<li>Check every node and compare the key</li>\n<li>If the key is less than the node, move left to the tree.</li>\n<li>If the key is greater than the node, move right to the tree</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    Tree node = <span class=\"keyword\">new</span> Tree(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        root = node;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tree item = root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &lt; item.getKey()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.getLeft() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                item.setLeft(node);</span><br><span class=\"line\">                node.setParent(item);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            item = item.getLeft();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                item.setRight(node);</span><br><span class=\"line\">                node.setParent(item);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            item = item.getRight();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Find-Search\"><a href=\"#Find-Search\" class=\"headerlink\" title=\"Find / Search\"></a>Find / Search</h2><p>To find an entry in the tree, we have to search the tree recursively. If the key is less than the node then we have to move left otherwise, right.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Tree <span class=\"title\">findNode</span><span class=\"params\">(Tree node, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getKey() == key) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; node.getKey()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findNode(node.getLeft(), key);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findNode(node.getRight(), key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findNode(root, key) != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Delete\"><a href=\"#Delete\" class=\"headerlink\" title=\"Delete\"></a>Delete</h2><p>While deleting a node from a tree, there can be three criteria to look</p>\n<ol>\n<li>Node is a leaf, having no child nodes</li>\n<li>Node has left / right child,</li>\n<li>Node has both left and right children.</li>\n</ol>\n<h3 id=\"Leaf-node\"><a href=\"#Leaf-node\" class=\"headerlink\" title=\"Leaf node\"></a>Leaf node</h3><p>If the node is a leaf node, then we can set the parent node to null.</p>\n<h3 id=\"Having-left-right-child\"><a href=\"#Having-left-right-child\" class=\"headerlink\" title=\"Having left / right child\"></a>Having left / right child</h3><p>If the node has a left / right child, then the parent will point to the child of the node.</p>\n<h2 id=\"Having-both-left-and-right-child\"><a href=\"#Having-both-left-and-right-child\" class=\"headerlink\" title=\"Having both left and right child\"></a>Having both left and right child</h2><p>If the node has both left and right children, then we have to follow these steps</p>\n<ol>\n<li>Find successor of the node</li>\n<li>Replace the node with the successor.</li>\n<li>Successor will have the left and right child of the node.</li>\n<li>Parent node will point to the successor.</li>\n</ol>\n<h3 id=\"Successor\"><a href=\"#Successor\" class=\"headerlink\" title=\"Successor\"></a>Successor</h3><p>To find the successor of the node, we need to follow these steps.</p>\n<ol>\n<li>Move to the right child of the node.</li>\n<li>Move to the way to the left most child. This child node will be the successor.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Tree <span class=\"title\">getSuccessor</span><span class=\"params\">(Tree node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> right = node.getRight();</span><br><span class=\"line\">    Tree successor = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        successor = right;</span><br><span class=\"line\">        right = right.getLeft();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> successor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The successor may contain the right child tree. In this case, the parent node of the successor will point to the right child and then replace the node with the successor.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    Tree node = findNode(root, key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Key does not exist&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getLeft() == <span class=\"keyword\">null</span> &amp;&amp; node.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        replaceNode(node, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.getLeft() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        replaceNode(node, node.getRight());</span><br><span class=\"line\">        node.setRight(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        replaceNode(node, node.getLeft());</span><br><span class=\"line\">        node.setLeft(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Tree successor = getSuccessor(node);</span><br><span class=\"line\">        replaceNode(successor, successor.getRight());</span><br><span class=\"line\"></span><br><span class=\"line\">        successor.setLeft(node.getLeft());</span><br><span class=\"line\">        successor.setRight(node.getRight());</span><br><span class=\"line\">        replaceNode(node, successor);</span><br><span class=\"line\"></span><br><span class=\"line\">        updateParent(successor.getLeft(), successor);</span><br><span class=\"line\">        updateParent(successor.getRight(), successor);</span><br><span class=\"line\"></span><br><span class=\"line\">        node.setLeft(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        node.setRight(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.setParent(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateParent</span><span class=\"params\">(Tree node, Tree parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node.setParent(parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceNode</span><span class=\"params\">(Tree node, Tree replace)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getParent() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        root = replace;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class=\"line\">        node.getParent().setLeft(replace);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node.getParent().setRight(replace);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    updateParent(replace, node.getParent());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Height\"><a href=\"#Height\" class=\"headerlink\" title=\"Height\"></a>Height</h2><p>Height of a binary search tree is the depth count from root to the leaf node.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">(Tree node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(height(node.getLeft()) + <span class=\"number\">1</span>, height(node.getRight()) + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Min\"><a href=\"#Min\" class=\"headerlink\" title=\"Min\"></a>Min</h2><p>From the definition, the leftmost element will have the minimum item of the tree.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(Tree node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.min(min(node.getLeft()), node.getKey());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Max\"><a href=\"#Max\" class=\"headerlink\" title=\"Max\"></a>Max</h2><p>From the definition, the rightmost element will have the minimum item of the tree.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(Tree node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Math.max(max(node.getRight()), node.getKey());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Complexity\"><a href=\"#Complexity\" class=\"headerlink\" title=\"Complexity\"></a>Complexity</h2><p>In a balanced tree (best case), the complexity is O(log n).<br>In the worst case, if the data is sorted, then the tree will behave like a linked list with the complexity is O(n).</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Operation</th>\n<th align=\"center\">Best case</th>\n<th align=\"center\">Worst case</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Insert</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Search</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Delete</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Min</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Max</td>\n<td align=\"center\">O(log n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Height</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody></table>\n","categories":["Algorithm"],"tags":["binary search tree","algorithm","java"]},{"title":"Design a job scheduler","url":"/2021/07/12/design-job-scheduler/","content":"<h2 id=\"Design-of-a-job-scheduler\"><a href=\"#Design-of-a-job-scheduler\" class=\"headerlink\" title=\"Design of a job scheduler\"></a>Design of a job scheduler</h2><p><img src=\"https://miro.medium.com/max/2000/1*KzGIlkYpm0v9E32SIR5pPw.jpeg\" alt=\"Untitled Diagram (1)\"></p>\n<p>From <a href=\"https://en.wikipedia.org/wiki/Job_scheduler\">Wikipedia</a>,</p>\n<blockquote>\n<p>A <strong>job scheduler</strong> is a computer application for controlling unattended background program execution of jobs.</p>\n</blockquote>\n<p>In the real world, we find lots of use cases of a job scheduler. For example,</p>\n<ul>\n<li>Run a script daily to generate reports</li>\n<li>Charge subscription of a user daily/monthly.</li>\n<li>Running of a payroll program</li>\n</ul>\n<p>In this post, we’ll design and develop a job scheduler that can help us to scale in need.</p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><ul>\n<li>A job can be scheduled for one time or multiple executions</li>\n<li>Results of job executions are stored and can be queried</li>\n</ul>\n<p>There are also some non-functional requirements to think of</p>\n<ul>\n<li>Scalability: Thousands or even millions of jobs can be scheduled and run per day</li>\n<li>Durability: Jobs must not get lost</li>\n<li>Reliability: Jobs must not be executed much later than expected or dropped</li>\n<li>Availability: It should always be possible to schedule and execute jobs </li>\n<li>Jobs must not be executed multiple times (or such occurrences should be kept to a minimum)</li>\n</ul>\n<h2 id=\"Job-service\"><a href=\"#Job-service\" class=\"headerlink\" title=\"Job service\"></a>Job service</h2><p>First, we need to create a service to store the job metadata. For simplicity, we can make a rest service endpoint that will store the job information in storage.</p>\n<p><img src=\"https://miro.medium.com/max/1122/1*zytff-jKeHeL_1mo9SP4Ag.png\" alt=\"Untitled Diagram (1)\"></p>\n<p>If we deploy our job service behind a load balancer then it can handle traffic load easily and store job metadata to the database.</p>\n<h2 id=\"Job-execution\"><a href=\"#Job-execution\" class=\"headerlink\" title=\"Job execution\"></a>Job execution</h2><p>So far, we have job information stored in our database. Now, we need to run a background process to check when to start a job. Either we need to run <a href=\"https://en.wikipedia.org/wiki/Cron\">cron-like</a> process or use an event-driven strategy to have the same functionality.</p>\n<blockquote>\n<p>The software utility <strong>cron</strong> also known as <strong>cron job</strong> is a time-based job scheduler in Unix-like computer operating systems. Users who set up and maintain software environments use cron to schedule jobs.</p>\n</blockquote>\n<p>Cron internally uses crontab (Cron table) to run periodically schedule jobs. There are two ways to solve our problem with cron.</p>\n<ol>\n<li>Run a script periodically. This script will search all the jobs which match the criteria and executes them.</li>\n<li>For every job, add an entry to crontab to run jobs as scheduled. This solution is not scalable and not fault-tolerant as it has a dependency on the operating system.</li>\n</ol>\n<p>We can run a script periodically to check if any jobs are eligible to execute. Some decisions need to be made to implement this.</p>\n<ul>\n<li>The job trigger time will not be exact. If a job has a trigger time just after the script run, then the job will wait until the next iteration.</li>\n<li>To reduce the job execution delay, the length of the period needs to be smaller and thus the resource will be busy with frequent execution. </li>\n</ul>\n<h2 id=\"Event-based-trigger\"><a href=\"#Event-based-trigger\" class=\"headerlink\" title=\"Event-based trigger\"></a>Event-based trigger</h2><p>Jobs can run based on a certain event. If we can create an event for each of the jobs, then at some event of execution time we can start our job.</p>\n<p>Redis has an event called expiration event. Redis deletes a key after the time expires and throws an event to the subscriber channel. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; createClient &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> client = createClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: process.env.REDIS_ENDPOINT || <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: process.env.REDIS_PORT || <span class=\"number\">6379</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.REDIS_PASSWORD) &#123;</span><br><span class=\"line\">    client.auth(process.env.REDIS_PASSWORD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">client.config(<span class=\"string\">&#x27;set&#x27;</span>, <span class=\"string\">&#x27;notify-keyspace-events&#x27;</span>, <span class=\"string\">&#x27;Ex&#x27;</span>);</span><br><span class=\"line\">client.subscribe(<span class=\"string\">&#x27;__keyevent@0__:expired&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">client.on(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channel, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>For each job, we can create a key in Redis with appropriate expiration. After the time expired, we will get an event and run the appropriate trigger based on the task metadata.</p>\n<h2 id=\"Timing-of-Redis-expired-events\"><a href=\"#Timing-of-Redis-expired-events\" class=\"headerlink\" title=\"Timing of Redis expired events\"></a>Timing of Redis expired events</h2><p>Keys with a time to live associated are expired by Redis in two ways:</p>\n<ul>\n<li>When the key is accessed by a command and is found to be expired.</li>\n<li>Via a background system that looks for expired keys in the background, incrementally, to be able to also collect keys that are never accessed.</li>\n</ul>\n<p>There are some issues with this approach,</p>\n<ul>\n<li>There are no guarantees that the Redis server will be able to generate the expired event at the time the key time to live reaches the value of zero</li>\n<li>expired events <strong>are generated when the Redis server deletes the key</strong> and not when the time to live theoretically reaches the value of zero.</li>\n<li>Pub/Sub communication in a cluster, events notifications <strong>are not</strong> broadcasted to all nodes. </li>\n</ul>\n<p>For Redis expiration, it runs these steps 10 times per second</p>\n<ol>\n<li>Test 20 random keys from the set of keys with an associated expire.</li>\n<li>Delete all the keys found expired.</li>\n<li>If more than 25% of keys were expired then starts again.</li>\n</ol>\n<p>The accuracy of expiration of Redis</p>\n<ul>\n<li>For Redis 2.4, zero to one second</li>\n<li>Redis 2.6, the error is from 0 to 1 millisecond.</li>\n</ul>\n<p>So, provided values look good to implement events in Redis.</p>\n<p>Note: For the Redis cluster, to receive all keyspace events, we need to subscribe to each of the nodes.</p>\n<h2 id=\"Durability\"><a href=\"#Durability\" class=\"headerlink\" title=\"Durability\"></a>Durability</h2><p>If the event server crashes or execution fails, there is no way to track what happened or retry the same operation. There may be a running job going on, and the service can’t handle a new one. </p>\n<p>To solve these issues, we can add an extra layer of a queue. The generated event will publish to a topic in the Queue. We are using Kafka for this use case.</p>\n<p>To test this, we can set up a Kafka using docker-compose.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;bitnami/zookeeper:latest&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;2181:2181&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_ANONYMOUS_LOGIN=yes</span></span><br><span class=\"line\">  <span class=\"attr\">kafka:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">&#x27;kafka&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;9092:9092&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_BROKER_ID=1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_LISTENERS=PLAINTEXT://:9092</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">zookeeper</span></span><br></pre></td></tr></table></figure>\n\n<p>A producer example to push events to our Kafka cluster.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// producer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Kafka &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;kafkajs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> clientId = <span class=\"string\">&quot;my-app&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> brokers = [<span class=\"string\">&quot;localhost:9092&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> topic = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> kafka = <span class=\"keyword\">new</span> Kafka(&#123; clientId, brokers &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> producer = kafka.producer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> send = <span class=\"keyword\">async</span> (msg) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> producer.connect()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> producer.send(&#123;</span><br><span class=\"line\">            topic,</span><br><span class=\"line\">            <span class=\"attr\">acks</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">messages</span>: [msg],</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Message sent successfully&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(<span class=\"string\">&quot;could not write message &quot;</span> + err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = send;</span><br></pre></td></tr></table></figure>\n\n<p>A consumer can listent to a certain topic and handle execution based on type.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// consumer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Kafka &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;kafkajs&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> clientId = <span class=\"string\">&quot;my-app&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> brokers = [<span class=\"string\">&quot;localhost:9092&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> topic = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> kafka = <span class=\"keyword\">new</span> Kafka(&#123; clientId, brokers &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> consumer = kafka.consumer(&#123; <span class=\"attr\">groupId</span>: clientId &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> consume = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> consumer.connect()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> consumer.subscribe(&#123; topic, <span class=\"attr\">fromBeginning</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> consumer.run(&#123;</span><br><span class=\"line\">        <span class=\"attr\">eachMessage</span>: <span class=\"function\">(<span class=\"params\">&#123; message &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;message.key&#125;</span>: <span class=\"subst\">$&#123;message.value&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">consume().catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">&quot;error in consumer: &quot;</span>, err)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The executor service will subscribe to a different topic and then act based on different properties.</p>\n<h2 id=\"Message-duplication\"><a href=\"#Message-duplication\" class=\"headerlink\" title=\"Message duplication\"></a>Message duplication</h2><p>These consumers can perform different tasks based on events. In our case, we need to ensure the executor service need to runs exactly once.</p>\n<p>There are two different ways to solve this problem.</p>\n<ol>\n<li>Message broker support for duplication.</li>\n<li>Using a database with ACID properties</li>\n</ol>\n<h3 id=\"How-do-I-get-exactly-once-messaging-from-Kafka\"><a href=\"#How-do-I-get-exactly-once-messaging-from-Kafka\" class=\"headerlink\" title=\"How do I get exactly once messaging from Kafka?\"></a>How do I get exactly once messaging from Kafka?</h3><p>Exactly once semantics has two parts: avoiding duplication during data production and avoiding duplicates during data consumption.</p>\n<p>There are two approaches to getting exactly once semantics during data production:</p>\n<ol>\n<li>Use a single-writer per partition and every time you get a network error check the last message in that partition to see if your last write succeeded</li>\n<li>Include a primary key (UUID or something) in the message and deduplicate on the consumer.</li>\n</ol>\n<h3 id=\"Database-layer-duplication-handling\"><a href=\"#Database-layer-duplication-handling\" class=\"headerlink\" title=\"Database layer duplication handling\"></a>Database layer duplication handling</h3><p>When a consumer gets the event to execute the task, it can use the locking benefit of a database system. The approach can be,</p>\n<ol>\n<li>Add an entry to a table with UNIQUE_KEY restriction, so that multiple entries can not be created with the same ID.</li>\n<li>Process execution tasks in transactions.</li>\n</ol>\n<p>If the databases are in different locations or zone, then we need to ensure strong consistency in this approach. Otherwise, a different consumer from a different location will same entity and that will lead to another problem of conflict resolution.</p>\n<h2 id=\"Executor-service\"><a href=\"#Executor-service\" class=\"headerlink\" title=\"Executor service\"></a>Executor service</h2><p>The last piece of our system is an executor service. The consumer can act as the executor service to run appropriate operations based on scheduler metadata.</p>\n<p>From this service, the metadata of execution can be stored in a database for future queries.</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*2oe9jxD7buwel91tgue4Gw.png\" alt=\"full\"></p>\n<h2 id=\"Improvement\"><a href=\"#Improvement\" class=\"headerlink\" title=\"Improvement\"></a>Improvement</h2><p>There are some improvements we can do to make our service better. </p>\n<ol>\n<li>If we can connect the event generation directly with the topic queue, then the producer service layer can be removed.</li>\n<li>Queue topics can be distributed with some criteria. This way consumers can be distributed with focused action groups.</li>\n<li>Database partition can be used based on need.</li>\n</ol>\n<p>Please share improvement ideas or feedback on this.</p>\n","categories":["System design"],"tags":["scheduler","redis","programming"]},{"title":"Scale a real-time collaborative editor","url":"/2021/07/06/scaling-collaborative-editor/","content":"<p><img src=\"https://miro.medium.com/max/1400/1*7C8YrY6ety7tYjJs3eb9Pg.jpeg\" alt=\"alt text\" title=\"Editor\"></p>\n<p>In our previous post, we have developed a basic real-time collaborative application.</p>\n<p>In this post, we are going to scale the system.</p>\n<p>Our previous application is perfectly fine for small project. Let’s say we have added more features into it and we want to deliver this application to end user.</p>\n<p>To make this application production ready we need to make sure this is scalable and always available to our customer.</p>\n<h2 id=\"Vertical-scale\"><a href=\"#Vertical-scale\" class=\"headerlink\" title=\"Vertical scale\"></a>Vertical scale</h2><p>It involves upgrading our instance or add extra resource to support increasing workload.</p>\n<h2 id=\"Horizontal-scale\"><a href=\"#Horizontal-scale\" class=\"headerlink\" title=\"Horizontal scale\"></a>Horizontal scale</h2><p>Distributed strategy of adding copies running same task in parallel.</p>\n<p>Both of them have separate pros and cons and different use cases based on different scenario. But, in enterprise application horizontal scale is quite popular.</p>\n<h2 id=\"Socket-scale\"><a href=\"#Socket-scale\" class=\"headerlink\" title=\"Socket scale\"></a>Socket scale</h2><p>In our application, we are using socket to handle real-time operations and socket internally uses TCP port to establish a connection. The maximum number of TCP sessions a single source IP can make to a single destination IP and port is 65,535. So, we can only have maximum 65K of connection at a time with a single instance.</p>\n<p>There are two ways to solve this issue,</p>\n<ol>\n<li>Assign IPs to an instance and have ports associated with it. This way we can have maximum connection = number of IP * 65K</li>\n<li>Running multiple instance.</li>\n</ol>\n<p>The problem of assigning IPs to and instance is manual workload with limited capacity. For that reason, we’ll be moving forward with multiple instance. And this way we’ll have the benefit of scaling out more as per need.</p>\n<p>With multiple instance, there is another issue of socket synchronization. For an example, two user is connected with two different instance. If one user posts an action, other user will not able to respond to it.<br>To communicate with these sockets, we need a central place to handle synchronization. Any message broker with pub-sub mechanism will solve. For our use case, we’ll be using redis for this.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createClient &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;redis&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redisAdapter = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@socket.io/redis-adapter&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pubClient = createClient(&#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: process.env.REDIS_ENDPOINT || <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: process.env.REDIS_PORT || <span class=\"number\">6379</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.REDIS_PASSWORD) &#123;</span><br><span class=\"line\">    pubClient.auth(process.env.REDIS_PASSWORD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> subClient = pubClient.duplicate();</span><br><span class=\"line\">io.adapter(redisAdapter(pubClient, subClient));</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Load-balance\"><a href=\"#Load-balance\" class=\"headerlink\" title=\"Load balance\"></a>Load balance</h2><p><img src=\"https://miro.medium.com/max/1142/1*74Xo4hv3qRN-I38rIZeN6g.png\" alt=\"alt text\" title=\"Load balance\"></p>\n<p>For load balancing purpose, we’ll be using Nginx as this one of the most popular tools having so much resource. We can also choose other platform like HAProxy or anything preferable.</p>\n<p>When we are having multiple instances, we need to make sure our socket sticks to the instance it already connected to. If every time it connects or creates a new socket in each server, then we are going to have performance hit for sure.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">worker_connections</span>  <span class=\"number\">1024</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">gzip</span> <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">gzip_proxied</span> <span class=\"string\">any;</span></span><br><span class=\"line\">    <span class=\"string\">gzip_types</span> <span class=\"string\">text/plain</span> <span class=\"string\">application/json;</span></span><br><span class=\"line\">    <span class=\"string\">gzip_min_length</span> <span class=\"number\">1000</span><span class=\"string\">;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"string\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">listen</span> <span class=\"number\">80</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">            <span class=\"string\">proxy_set_header</span> <span class=\"string\">X-Forwarded-For</span> <span class=\"string\">$proxy_add_x_forwarded_for;</span></span><br><span class=\"line\">            <span class=\"string\">proxy_set_header</span> <span class=\"string\">Host</span> <span class=\"string\">$host;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"string\">proxy_pass</span> <span class=\"string\">http://nodes;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># enable WebSockets</span></span><br><span class=\"line\">            <span class=\"string\">proxy_http_version</span> <span class=\"number\">1.1</span><span class=\"string\">;</span></span><br><span class=\"line\">            <span class=\"string\">proxy_set_header</span> <span class=\"string\">Upgrade</span> <span class=\"string\">$http_upgrade;</span></span><br><span class=\"line\">            <span class=\"string\">proxy_set_header</span> <span class=\"string\">Connection</span> <span class=\"string\">&quot;upgrade&quot;</span><span class=\"string\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">upstream</span> <span class=\"string\">nodes</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">ip_hash;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">server</span> <span class=\"string\">app01:3000;</span></span><br><span class=\"line\">        <span class=\"string\">server</span> <span class=\"string\">app02:3000;</span></span><br><span class=\"line\">        <span class=\"string\">server</span> <span class=\"string\">app03:3000;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To test out our load balancing strategy we are going to run our application using docker compose.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">app01:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_ENDPOINT=redis</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">app02:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_ENDPOINT=redis</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">app03:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">REDIS_ENDPOINT=redis</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">nginx/</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">80</span><span class=\"string\">:80</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">app01</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">app02</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">app03</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Deployment-strategy\"><a href=\"#Deployment-strategy\" class=\"headerlink\" title=\"Deployment strategy\"></a>Deployment strategy</h2><p>After figuring out all the tweaks and improvements, we can deploy our service to the cloud infrastructure. There can be separate front end and backend application to support our application.</p>\n<p>For a production ready application, checklist of workloads needs to be done before going live.</p>\n<ol>\n<li>Deploy our front end application behind Content Delivery Network(CDN) which will support scaling across the global regions and caches the content for faster response</li>\n<li>Deploy our services inside a cluster handling load.</li>\n<li>Autoscale service container based on parameters</li>\n<li>Autoscale server instance based on paramerters like CPU usage, Memory </li>\n<li>Log and monitor requests and act on regular feedback</li>\n</ol>\n<h2 id=\"Final-product\"><a href=\"#Final-product\" class=\"headerlink\" title=\"Final product\"></a>Final product</h2><p>Let’s define some requirement to roll out our application to end users. These are some of the basic features can be added or we’ll do a system design for them. </p>\n<ol>\n<li>User can authenticate and authorize</li>\n<li>Realtime collaborative editing</li>\n<li>Document save and retrieval</li>\n<li>Document history</li>\n<li>Comments / feedback</li>\n<li>Notification</li>\n</ol>\n<h2 id=\"Front-end\"><a href=\"#Front-end\" class=\"headerlink\" title=\"Front end\"></a>Front end</h2><p>Front end can be developed in any framework and deployed behind a CDN. To have better control over the editor, there are many things to consider about. Like</p>\n<ol>\n<li>Multiple cursor</li>\n<li>Apply style changes</li>\n<li>Import / Export support for differnt format</li>\n</ol>\n<h2 id=\"Backend-service\"><a href=\"#Backend-service\" class=\"headerlink\" title=\"Backend service\"></a>Backend service</h2><p>We can think of separate services to support our application.</p>\n<ol>\n<li>Authentication / Authorization service</li>\n<li>Application service </li>\n<li>Websocket service (Lightweight and Fast)</li>\n<li>Notification service</li>\n<li>Comment service</li>\n</ol>\n<p>All of these service can be developed and deployed independently behind load balancer. Auto scaling can be done based on different attributes.</p>\n<h2 id=\"Storage-decisions\"><a href=\"#Storage-decisions\" class=\"headerlink\" title=\"Storage decisions\"></a>Storage decisions</h2><p>We have plethora of database solutions to choose from. For out implementation, we can have different combination of selection.</p>\n<ol>\n<li>RDBMS (PostgreSQL, MySQL etc.) for user management service</li>\n<li>Document DB(MongoDB, CouchDB, PostgreSQL) for our document storage. </li>\n<li>Redis (For publish subscribe message broker)</li>\n<li>Time series database (InfluxDB) for user operation storage</li>\n<li>Storage for comments can be added in MongoDB</li>\n</ol>\n<h2 id=\"Data-stream\"><a href=\"#Data-stream\" class=\"headerlink\" title=\"Data stream\"></a>Data stream</h2><p>For our data stream we can use Apache Kafka. This is an open-source distributed event streaming platform.</p>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p><img src=\"https://miro.medium.com/max/1400/1*NkGkkbq_MJ0dDvnhvIVRZg.png\" alt=\"alt text\" title=\"Load balance\"></p>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><p>We tried to design a system based on some requirements. In real case this can change as per need. There are lot of resources can be found over internet to scale socket implementation.</p>\n<p><a href=\"https://socket.io/docs/v3/using-multiple-nodes/index.html\">Socket.io Using multiple nodes</a><br><a href=\"https://medium.com/containers-on-aws/scaling-a-realtime-chat-app-on-aws-using-socket-io-redis-and-aws-fargate-4ed63fb1b681\">Scaling a realtime chat app on AWS using Socket.io, Redis, and AWS Fargate</a><br><a href=\"https://phoenixframework.org/blog/the-road-to-2-million-websocket-connections\">The Road to 2 Million Websocket Connections in Phoenix — Phoenix Blog</a><br><a href=\"https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/\">600k concurrent websocket connections on AWS using Node.js</a><br><a href=\"https://goroutines.com/10m\">10M — goroutines</a></p>\n","categories":["System design"],"tags":["socket","node.js","ckeditor"]},{"title":"Building a real-time collaborative editor","url":"/2021/07/04/collaborative-editor/","content":"<p><img src=\"https://miro.medium.com/max/2000/1*msFlUe_uZknWisLa8Ef7Rg.jpeg\" alt=\"alt text\" title=\"Editor\"></p>\n<p>A text editor can be a real game changer when it’s equipped with the functionality of collaborative editing. There are so many tools out there providing such features with great excellence such as Google Doc, Microsoft word etc.</p>\n<p>I planned to design and develop such a system which can handle basic text editing and can scale on need. So I tried developing a POC(Proof of concept) which can handle real-time editing and went through some ideas to make this solution scalable.</p>\n<p>Obviously, there are scopes for improvement and please share your ideas which will give better insights.</p>\n<h2 id=\"Requirement\"><a href=\"#Requirement\" class=\"headerlink\" title=\"Requirement\"></a>Requirement</h2><p>Let’s define some project requirement to start on</p>\n<ol>\n<li>Basic editing</li>\n<li>Realtime collaboration</li>\n<li>Basic operational transform</li>\n<li>List of joined users</li>\n<li>Add / Remove users based on event</li>\n</ol>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><ol>\n<li>CKEditor 4</li>\n<li>Plain &amp; Simple Javascript</li>\n<li>Node.js &amp; Express</li>\n<li>Socket.io</li>\n<li>For operational trasform I’ve used the CKEditor 5 diff library to adapt changes to the editor.</li>\n</ol>\n<h2 id=\"Initial-setup\"><a href=\"#Initial-setup\" class=\"headerlink\" title=\"Initial setup\"></a>Initial setup</h2><p>First we need a Node.js server which will host our application server and respond the front end in root endpoint.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;&lt;NAME&gt;&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;server.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;node server.js&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;nodemon server.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@socket.io/redis-adapter&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;express&quot;: &quot;^4.17.1&quot;,</span><br><span class=\"line\">    &quot;http&quot;: &quot;^0.0.1-security&quot;,</span><br><span class=\"line\">    &quot;redis&quot;: &quot;^3.1.2&quot;,</span><br><span class=\"line\">    &quot;socket.io&quot;: &quot;^4.1.2&quot;,</span><br><span class=\"line\">    &quot;uuid&quot;: &quot;^8.3.2&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;nodemon&quot;: &quot;^2.0.9&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I’ve added a redirection in the root endpoint to generate document id and load the html. If we store the document user specific then this step is completely unnecessary.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//server.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"attr\">v4</span>: uuidv4 &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;uuid&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">&#x27;/public&#x27;</span>, express.static(<span class=\"string\">&#x27;public&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/:id&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileDirectory = path.resolve(__dirname);</span><br><span class=\"line\">    res.sendFile(<span class=\"string\">&#x27;index.html&#x27;</span>, &#123; <span class=\"attr\">root</span>: fileDirectory &#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.redirect(<span class=\"number\">307</span>, <span class=\"string\">&#x27;/&#x27;</span> + uuidv4());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Example app listening at http://localhost:<span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Adding CKEditor in our front end application along with bootstrap for simplicity.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Collaborative Editor<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot;</span> <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">integrity</span>=<span class=\"string\">&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">crossorigin</span>=<span class=\"string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.ckeditor.com/4.16.1/standard/ckeditor.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;public/writer.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;padding-top: 20px;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-7&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Collaborative Editor<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;editor-block&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;textarea&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                CKEDITOR.replace(<span class=\"string\">&#x27;textarea&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>We will get the document ID from the path</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// writer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> documentId = <span class=\"keyword\">new</span> URL(<span class=\"built_in\">window</span>.location.href).pathname.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> editor = CKEDITOR.instances.textarea;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Get data</span></span><br><span class=\"line\">editor.getData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set data</span></span><br><span class=\"line\">editor.setData(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Collaborative-editing\"><a href=\"#Collaborative-editing\" class=\"headerlink\" title=\"Collaborative editing\"></a>Collaborative editing</h2><p>To add collaboration in our editor, we have different way to implement.</p>\n<h3 id=\"Asynchronous-collaborative-editing\"><a href=\"#Asynchronous-collaborative-editing\" class=\"headerlink\" title=\"Asynchronous collaborative editing\"></a>Asynchronous collaborative editing</h3><p>In this approach, the editor synchronize the content based on user event. For an example, after the user manually save the document or trigger an event, the content delivered to different clients associated with the content.<br>To publish local content, manual action is involved.</p>\n<h3 id=\"Real-time-editing\"><a href=\"#Real-time-editing\" class=\"headerlink\" title=\"Real-time editing\"></a>Real-time editing</h3><p>The content of the editor synchronize with other clients in real-time.</p>\n<p>We will be moving forward with the real-time sync approach.</p>\n<h2 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h2><p>In this phase, we are going to add socket implementation in our project.</p>\n<p>Our server will listen to socket ports.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> httpServer = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>).createServer(app);</span><br><span class=\"line\"><span class=\"keyword\">const</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;socket.io&quot;</span>)(httpServer);</span><br><span class=\"line\">...</span><br><span class=\"line\">io.on(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"function\"><span class=\"params\">socket</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;socket connected..&#x27;</span>, socket.id);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">httpServer.listen(port);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Real-time-user-management-Optional\"><a href=\"#Real-time-user-management-Optional\" class=\"headerlink\" title=\"Real-time user management (Optional)\"></a>Real-time user management (Optional)</h2><p>We will show the connected users and update the list real-time.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">let</span> roomMembers = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> socketRoom = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">io.on(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"function\"><span class=\"params\">socket</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;socket connected..&#x27;</span>, socket.id);</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.on(<span class=\"string\">&#x27;register&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> room = data.documentId;</span><br><span class=\"line\">        socket.join(room);</span><br><span class=\"line\"></span><br><span class=\"line\">        socketRoom[socket.id] = room;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roomMembers[room]) &#123;</span><br><span class=\"line\">            roomMembers[room].push(&#123; <span class=\"attr\">id</span>: socket.id, <span class=\"attr\">name</span>: data.handle &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            roomMembers[room] = [&#123; <span class=\"attr\">id</span>: socket.id, <span class=\"attr\">name</span>: data.handle &#125;];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Let all the clients know about new user to the document</span></span><br><span class=\"line\">        socket.to(room).emit(<span class=\"string\">&#x27;register&#x27;</span>, &#123; <span class=\"attr\">id</span>: socket.id, <span class=\"attr\">name</span>: data.handle &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Post all the user list registered to this document</span></span><br><span class=\"line\">        io.in(room).emit(<span class=\"string\">&#x27;members&#x27;</span>, roomMembers[room]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    socket.on(<span class=\"string\">&#x27;disconnect&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Disconnected&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> room = socketRoom[socket.id];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (room) &#123;</span><br><span class=\"line\">            roomMembers[room] = roomMembers[room].filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item.id !== socket.id</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (roomMembers[room].length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> roomMembers[room];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> socketRoom[socket.id];</span><br><span class=\"line\">            socket.to(room).emit(<span class=\"string\">&#x27;user_left&#x27;</span>, &#123; <span class=\"attr\">id</span>: socket.id &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Add a list node to show all the connected users.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;handle&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;User&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-outline-success&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-5&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-header&quot;</span>&gt;</span></span><br><span class=\"line\">                Editors</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group list-group-flush&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;editors&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Dynamically add the users to DOM</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// writer.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">let</span> socket;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handle = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;handle&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> register = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;register&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addEditor</span>(<span class=\"params\">writer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;editors&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    li.appendChild(<span class=\"built_in\">document</span>.createTextNode(writer.name));</span><br><span class=\"line\">    li.className = <span class=\"string\">&quot;list-group-item&quot;</span>;</span><br><span class=\"line\">    li.id = writer.id;</span><br><span class=\"line\">    ul.appendChild(li);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeEditor</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> elem = <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elem.parentNode.removeChild(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerUserListener</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    handle.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">    register.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> editorBlock = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;editor-block&#x27;</span>);</span><br><span class=\"line\">    editorBlock.style.display = <span class=\"string\">&#x27;block&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    socket = io();</span><br><span class=\"line\">    socket.emit(<span class=\"string\">&#x27;register&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">handle</span>: handle.value,</span><br><span class=\"line\">        <span class=\"attr\">documentId</span>: documentId</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    socket.on(<span class=\"string\">&#x27;register&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        addEditor(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    socket.on(<span class=\"string\">&#x27;user_left&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        removeEditor(data.id);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    socket.on(<span class=\"string\">&#x27;members&#x27;</span>, <span class=\"function\">(<span class=\"params\">members</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        members.forEach(<span class=\"function\"><span class=\"params\">member</span> =&gt;</span> &#123;</span><br><span class=\"line\">            addEditor(member);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        socket.off(<span class=\"string\">&#x27;members&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">register.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, registerUserListener);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Collaborative-editing-1\"><a href=\"#Collaborative-editing-1\" class=\"headerlink\" title=\"Collaborative editing\"></a>Collaborative editing</h2><p>In terms of collaborative editing we can face different type of issues. The most critical of them is conflict resolution. When multiple user changing same text at a time can cause conflict which has to resolve in terms of real time collaboration. There are many algorithms to solve this issue in certain extent, but they have different pros and cons in different situations. The most popular of them is operational transform.</p>\n<h2 id=\"Operational-transform\"><a href=\"#Operational-transform\" class=\"headerlink\" title=\"Operational transform\"></a>Operational transform</h2><p>According to <a href=\"https://en.wikipedia.org/wiki/Operational_transformation\">wikipedia</a></p>\n<blockquote>\n<p>Operational transformation (OT) is a technology for supporting a range of collaboration functionalities in advanced collaborative software systems. OT was originally invented for consistency maintenance and concurrency control in collaborative editing of plain text documents. </p>\n</blockquote>\n<p>Implementing OT is something complex which takes a lot of time to implement and be good at. There is a famous quote by Joseph Gentle, one of the early people implemented OT</p>\n<blockquote>\n<p>Unfortunately, implementing OT sucks. There’s a million algorithms with different tradeoffs, mostly trapped in academic papers. The algorithms are really hard and time consuming to implement correctly. […] Wave took 2 years to write and if we rewrote it today, it would take almost as long to write a second time. </p>\n</blockquote>\n<p>Let’s look at a example of operational transform. Let’s say we have a text <code>CA</code> and two different user is doing operation </p>\n<p>String –&gt; CA<br>User 1 –&gt; CAT (operation O1)<br>USER 2 –&gt; HAT (opearion O2)</p>\n<p>O1 = [insert T at position 2]<br>O2 = [insert T at position 2, delete C at position 0, insert H at position 0]</p>\n<p>For User 1, local operation is O1 and incoming change operation is O2<br>For User 2, local operation is O2 and incoming change operation is O1</p>\n<p>To add transformation, we have to apply both these changes to the string. The transformation will be,</p>\n<pre><code>For User 1, String --&gt; O2 --&gt; O1  \n    String --&gt; CA \n    O2     --&gt; HAT\n    O1     --&gt; HAT (Result)\nFor User 2, String --&gt; O1 --&gt; O2 \n    String --&gt; CA\n    O1     --&gt; CAT\n    O2     --&gt; HAT (Result)\n</code></pre>\n<p>The states are synchronized for both the user.</p>\n<p>This way we’ll get the same result at the end of the transformation and for every changes we made we will apply that with the last sync value.</p>\n<p>For this project, I have used CKEditor 5 <a href=\"https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_difftochanges.html\"><code>diffToChanges</code></a> util to check the changes(operations) from sync state and then apply in the editor.</p>\n<blockquote>\n<p>The most difficult part of OT is not the code, but the difficulty in proving that your system is correct. Therefore, maintaining OT code is difficult. Either you need to prove your code correct repeatedly (and historically people make mistakes), or you need a powerful testing infrastructure for concurrent/distributed systems (which is also hard to write)<a href=\"https://digitalfreepen.com/2018/01/04/operational-transform-hard.html\">1</a></p>\n</blockquote>\n<h2 id=\"OT-implementation\"><a href=\"#OT-implementation\" class=\"headerlink\" title=\"OT implementation\"></a>OT implementation</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\">socket.on(<span class=\"string\">&#x27;content_change&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> room = data.documentId;</span><br><span class=\"line\">    socket.to(room).emit(<span class=\"string\">&#x27;content_change&#x27;</span>, data.changes);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>Now, We need to apply transformation to the editor content. In the code, I publish changes to the socket after the user stopped typing. In this case, the user will compare the changes with the sync state and then apply the changes to the state and publish the changes to the socket.</p>\n<p>While receiving the change, first it’ll check with the sync state and then apply it there. After that, it’ll apply the local changes to the state and apply and set value of the editor. For the local additional changes it’ll then publish again to the socket.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// writer.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// Sync state store</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> syncValue = <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> keypressed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getChanges</span>(<span class=\"params\">input, output</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> diffToChanges(diff(input, output), output);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyChanges</span>(<span class=\"params\">input, changes</span>) </span>&#123;</span><br><span class=\"line\">    changes.forEach(<span class=\"function\"><span class=\"params\">change</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (change.type == <span class=\"string\">&#x27;insert&#x27;</span>) &#123;</span><br><span class=\"line\">            input.splice(change.index, <span class=\"number\">0</span>, ...change.values);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (change.type == <span class=\"string\">&#x27;delete&#x27;</span>) &#123;</span><br><span class=\"line\">            input.splice(change.index, change.howMany);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyLocalChanges</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keypressed &amp;&amp; editor.checkDirty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> currentData = editor.getData();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> input = <span class=\"built_in\">Array</span>.from(syncValue);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> output = <span class=\"built_in\">Array</span>.from(currentData);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> changes = getChanges(input, output);</span><br><span class=\"line\">        applyChanges(input, changes);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (output.join(<span class=\"string\">&#x27;&#x27;</span>) == input.join(<span class=\"string\">&#x27;&#x27;</span>)) &#123;</span><br><span class=\"line\">            socket.emit(<span class=\"string\">&#x27;content_change&#x27;</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">documentId</span>: documentId,</span><br><span class=\"line\">                <span class=\"attr\">changes</span>: changes</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            editor.resetDirty();</span><br><span class=\"line\">            syncValue = input;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        keypressed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">socket.on(<span class=\"string\">&#x27;content_change&#x27;</span>, <span class=\"function\">(<span class=\"params\">incomingChanges</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> input = <span class=\"built_in\">Array</span>.from(syncValue);</span><br><span class=\"line\">    applyChanges(input, incomingChanges);</span><br><span class=\"line\">    syncValue = input;</span><br><span class=\"line\">    applyLocalChanges();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ranges = editor.getSelection().getRanges();</span><br><span class=\"line\">    editor.setData(syncValue.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    editor.getSelection().selectRanges(ranges);</span><br><span class=\"line\">    editor.resetDirty();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">editor.on(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    keypressed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    timeout = <span class=\"built_in\">setTimeout</span>(applyLocalChanges, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Containerization\"><a href=\"#Containerization\" class=\"headerlink\" title=\"Containerization\"></a>Containerization</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM node:16-alpine</span><br><span class=\"line\">ENV NODE_ENV=production</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY [&quot;package.json&quot;, &quot;package-lock.json*&quot;, &quot;./&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install --production</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . .</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [ &quot;node&quot;, &quot;server.js&quot; ]</span><br></pre></td></tr></table></figure>\n\n<p>In the next part, I’ll share the ideas and implementation to scale this application.</p>\n<p>Full source code is hosted in <a href=\"https://github.com/mahfuzsust/collab\">Github</a> and a quick <a href=\"https://collab-edit-1.herokuapp.com/\">demo</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://digitalfreepen.com/2018/01/04/operational-transform-hard.html\">https://digitalfreepen.com/2018/01/04/operational-transform-hard.html</a></li>\n</ol>\n","categories":["System design"],"tags":["socket","node.js","ckeditor"]},{"title":"Min Stack","url":"/2021/05/24/min-stack/","content":"<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>\n<p>Implement the <code>MinStack</code> class:</p>\n<ul>\n<li><code>MinStack()</code> initializes the stack object.</li>\n<li><code>void push(val)</code> pushes the element <code>val</code> onto the stack.</li>\n<li><code>void pop()</code> removes the element on the top of the stack.</li>\n<li><code>int top()</code> gets the top element of the stack.</li>\n<li><code>int getMin()</code> retrieves the minimum element in the stack.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input\n[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</code></pre>\n<p><strong>Solution:</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinStack</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; values = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; mins = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinStack</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mins = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMin</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.mins.isEmpty() || val &lt;= <span class=\"keyword\">this</span>.getMin()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mins.add(val);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values.add(val);</span><br><span class=\"line\">        setMin(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.values.remove(<span class=\"keyword\">this</span>.values.size() - <span class=\"number\">1</span>) == <span class=\"keyword\">this</span>.getMin()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.mins.remove(<span class=\"keyword\">this</span>.mins.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">top</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.values.get(<span class=\"keyword\">this</span>.values.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.mins.get(<span class=\"keyword\">this</span>.mins.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Leetcode"],"tags":["algorithm","java","stack"]},{"title":"Convert Sorted Array to Binary Search Tree","url":"/2021/05/23/convert-sorted-array-to-binary-search-tree/","content":"<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a <strong>height-balanced</strong> binary search tree</em>.</p>\n<p>A <strong>height-balanced</strong> binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p>\n<p><strong>Example 1:</strong><br><img src=\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\"><br>    Input: nums = [-10,-3,0,5,9]<br>    Output: [0,-3,9,-10,null,5]<br>    Explanation: [0,-10,5,null,-3,null,9] is also accepted:</p>\n<p><img src=\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\"><br><strong>Example 2:</strong><br><img src=\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\"><br>    Input: nums = [1,3]<br>    Output: [3,1]<br>    Explanation: [1,3] and [3,1] are both a height-balanced BSTs.</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n<li><code>nums</code> is sorted in a <strong>strictly increasing</strong> order.</li>\n</ul>\n<p><strong>Solution</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    TreeNode() &#123;&#125;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> val) &#123; <span class=\"keyword\">this</span>.val = val; &#125;</span><br><span class=\"line\">    TreeNode(<span class=\"keyword\">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val = val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; q) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (q + p) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        TreeNode node = <span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\">        node.left = sortedArrayToBST(nums,p, mid -<span class=\"number\">1</span>);</span><br><span class=\"line\">        node.right = sortedArrayToBST(nums, mid + <span class=\"number\">1</span>, q);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sortedArrayToBST(nums, <span class=\"number\">0</span>, nums.length - <span class=\"number\">1</span>);       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Leetcode"],"tags":["algorithm","java","binary-search-tree"]},{"title":"Fibonacci Number","url":"/2021/05/23/fibonacci-number/","content":"<p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the <strong>Fibonacci sequence</strong>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<pre><code>F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</code></pre>\n<p>Given <code>n</code>, calculate <code>F(n)</code>.</p>\n<pre><code>Example 1:\nInput: n = 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n\nExample 2:\nInput: n = 3 Output: 2 Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n\nExample 3:\nInput: n = 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n</code></pre>\n<p>Solution</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] val = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">31</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getVal</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val[n] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            val[n] = fib(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getVal(n-<span class=\"number\">1</span>) + getVal(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Leetcode"],"tags":["algorithm","java","fibonacci"]},{"title":"Climbing Stairs","url":"/2021/05/23/climbing-stairs/","content":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>\n<pre><code>Example 1:\n\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\n\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</code></pre>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>This is a good example of fibonacci implementation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] val = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">46</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val[n] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            val[n] = climbStairs(n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (getValue(n-<span class=\"number\">1</span>) + getValue(n-<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Leetcode"],"tags":["algorithm","java","fibonacci"]},{"title":"Log everyday in google spreadsheet","url":"/2021/03/24/log-everyday-in-google-spreadsheet/","content":"<p>I just wanted to create a daily task list with notes and reminders in google spreadsheet. So, I created a template which will look like this.<br><img src=\"/content/images/2021/03/Screen-Shot-2021-03-24-at-9.44.06-AM.png\"><br>Now, I need to create a new sheet everyday where the sheet name will denote the day and after each month I needed it to back up in my google drive.</p>\n<p>To solve this problem, I have created a app script which will create a new sheet everyday I open the spreadsheet and backup in a separate file.</p>\n<p>My tasks will be</p>\n<ul>\n<li>Create a new clone of the template everyday</li>\n<li>Backup current sheet monthly</li>\n<li>Create google drive folders to organize</li>\n</ul>\n<p>First, we need to create a clone of the template sheet.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">cloneTemplateDaily</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = Utilities.formatDate(<span class=\"keyword\">new</span> Date(), <span class=\"string\">&quot;GMT&quot;</span>, <span class=\"string\">&quot;dd-MM-yyyy&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> ss = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> duplicate_sheet = ss.getSheetByName(name); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(duplicate_sheet == <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> templateSheet = ss.getSheetByName(<span class=\"string\">&quot;template&quot;</span>);</span><br><span class=\"line\">    ss.setActiveSheet(templateSheet);</span><br><span class=\"line\">    duplicate_sheet = ss.duplicateActiveSheet();</span><br><span class=\"line\">    duplicate_sheet.setName(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ss.setActiveSheet(duplicate_sheet);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Then I need to backup the sheet to my google drive</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">backupSheetMonthly</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lastMonthDate = getLastMonthDate();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fileName = Utilities.formatDate(lastMonthDate, <span class=\"string\">&quot;GMT&quot;</span>, <span class=\"string\">&quot;MMMM, yyyy&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> year = Utilities.formatDate(lastMonthDate, <span class=\"string\">&quot;GMT&quot;</span>, <span class=\"string\">&quot;yyyy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> rootFolder = getFolder(<span class=\"string\">&quot;My Logs&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> yearFolder = getFolder(year, rootFolder);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!fileExist(fileName, yearFolder)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = DriveApp.getFileById(SpreadsheetApp.getActiveSpreadsheet().getId())</span><br><span class=\"line\">    file.makeCopy(fileName, yearFolder);</span><br><span class=\"line\">    deleteSheets();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Now, all the methods that I require</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">fileExist</span><span class=\"params\">(name, folder)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = folder.getFilesByName(name);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(files.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> file = files.next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file.getName() == month) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">getFolder</span><span class=\"params\">(name, parent)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> folders = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!parent) &#123;</span><br><span class=\"line\">    folders = DriveApp.getFoldersByName(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    folders = parent.getFoldersByName(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span>(folders.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> folder = folders.next();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(folder.getName() == name) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> folder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!parent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DriveApp.createFolder(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parent.createFolder(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">getLastMonthDate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dt = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">  dt.setDate(<span class=\"number\">0</span>);</span><br><span class=\"line\">  dt.setDate(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">function <span class=\"title\">deleteSheets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ss = SpreadsheetApp.getActiveSpreadsheet();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sheets = ss.getSheets();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; sheets.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sheets[i].getName() !== <span class=\"string\">&quot;template&quot;</span>) &#123;</span><br><span class=\"line\">      ss.setActiveSheet(sheets[i]);</span><br><span class=\"line\">      ss.deleteActiveSheet();</span><br><span class=\"line\">      Utilities.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Lastly, I created two separate trigger that will call my two functions</p>\n<ol>\n<li>cloneTemplateDaily</li>\n<li>backupSheetMonthly</li>\n</ol>\n<p>I set up a trigger poninted to From spreadsheet - On open cloneTemplateDaily so there will be a new sheet name current date with the same template</p>\n<p>And a time based trigger that will run 1st of every month to run backupSheetMonthly function.</p>\n","tags":["app script","spreadsheet"]},{"title":"Kafka server setup","url":"/2021/03/08/kafka-server-setup/","content":"<p>Script to start a kafka server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setProperty</span></span>()&#123;</span><br><span class=\"line\">    awk -v pat=<span class=\"string\">&quot;^<span class=\"variable\">$1</span>=&quot;</span> -v value=<span class=\"string\">&quot;<span class=\"variable\">$1</span>=<span class=\"variable\">$2</span>&quot;</span> <span class=\"string\">&#x27;&#123; if ($0 ~ pat) print value; else print $0; &#125;&#x27;</span> <span class=\"variable\">$3</span> &gt; <span class=\"variable\">$3</span>.tmp</span><br><span class=\"line\">    mv <span class=\"variable\">$3</span>.tmp <span class=\"variable\">$3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">downloadAndPrepare</span></span>() &#123;</span><br><span class=\"line\">    DIR=<span class=\"string\">&quot;kafka/&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -d <span class=\"string\">&quot;<span class=\"variable\">$DIR</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">cd</span> kafka</span><br><span class=\"line\">        rm -rf nohup.out</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        wget https://www-us.apache.org/dist/kafka/2.3.0/kafka_2.12-2.3.0.tgz</span><br><span class=\"line\">        tar -xzf kafka_2.12-2.3.0.tgz</span><br><span class=\"line\">        mv kafka_2.12-2.3.0 kafka</span><br><span class=\"line\">        <span class=\"built_in\">cd</span> kafka</span><br><span class=\"line\">        rm -rf kafka_2.12-2.3.0.tgz</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">stopServer</span></span>() &#123;</span><br><span class=\"line\">    PIDS=$(ps ax | grep -i <span class=\"string\">&#x27;kafka\\.Kafka&#x27;</span> | grep java | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$PIDS</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No kafka server to stop&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> <span class=\"variable\">$PIDS</span>; <span class=\"keyword\">do</span> <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$pid</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    PIDS=$(ps ax | grep java | grep -i QuorumPeerMain | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$PIDS</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;No zookeeper server to stop&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> pid <span class=\"keyword\">in</span> <span class=\"variable\">$PIDS</span>; <span class=\"keyword\">do</span> <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$pid</span>; <span class=\"keyword\">done</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">startServer</span></span>() &#123;</span><br><span class=\"line\">    nohup bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</span><br><span class=\"line\">    nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">helpFunction</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Usage: <span class=\"variable\">$0</span> -n number&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;\\t-n Number of kafka server to launch&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> <span class=\"string\">&quot;n:&quot;</span> opt</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$opt</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        n ) number=<span class=\"string\">&quot;<span class=\"variable\">$OPTARG</span>&quot;</span> ;;</span><br><span class=\"line\">        ? ) helpFunction ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$number</span>&quot;</span> ]] || ! [[ <span class=\"string\">&quot;<span class=\"variable\">$number</span>&quot;</span> =~ ^[0-9]+$ ]]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    helpFunction</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">downloadAndPrepare</span><br><span class=\"line\">stopServer</span><br><span class=\"line\">startServer</span><br><span class=\"line\"></span><br><span class=\"line\">counter=1</span><br><span class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$&#123;counter&#125;</span> -lt <span class=\"variable\">$&#123;number&#125;</span> ]]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    cp config/server.properties config/<span class=\"string\">&quot;server-<span class=\"variable\">$counter</span>.properties&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    setProperty <span class=\"string\">&quot;broker.id&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$counter</span>&quot;</span> config/<span class=\"string\">&quot;server-<span class=\"variable\">$counter</span>.properties&quot;</span></span><br><span class=\"line\">    setProperty <span class=\"string\">&quot;log.dirs&quot;</span> <span class=\"string\">&quot;/tmp/kafka-logs-<span class=\"variable\">$counter</span>&quot;</span> config/<span class=\"string\">&quot;server-<span class=\"variable\">$counter</span>.properties&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;listeners=PLAINTEXT://:<span class=\"subst\">$((counter+9092)</span>)&quot;</span> &gt;&gt; config/<span class=\"string\">&quot;server-<span class=\"variable\">$counter</span>.properties&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    nohup bin/kafka-server-start.sh config/<span class=\"string\">&quot;server-<span class=\"variable\">$counter</span>.properties&quot;</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">    counter=$(( counter+<span class=\"number\">1</span> ))</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n\n","tags":["kafka"]},{"title":"How to implement cache in Java","url":"/2020/08/25/how-to-implement-cache-in-java/","content":"<p>According to <a href=\"https://en.wikipedia.org/wiki/Cache_%28computing%29\">wikipedia</a>, a cache is a hardware or software component that stores data so that future requests for that data can be served faster.</p>\n<h4 id=\"Benefits\"><a href=\"#Benefits\" class=\"headerlink\" title=\"Benefits:\"></a>Benefits:</h4><ul>\n<li>Faster access of data in O(1)</li>\n<li>Computation complexity once for the first time</li>\n</ul>\n<h4 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types:\"></a>Types:</h4><ul>\n<li>Memory cache</li>\n<li>Database cache</li>\n<li>Disk cache, etc</li>\n</ul>\n<p>In this post, we’ll go through the steps to create a in memory cache in java.</p>\n<p>To create a cache, we can simply use a map / dictionary data structure and we can get the expected result of O(1) for both get and put operation.</p>\n<p>But, we can’t store everything in our cache. We have storage and performance limits.</p>\n<p>A cache eviction algorithm is a way of deciding which element to evict when the cache is full. To gain optimized benefits there are many algorithms for different use cases.</p>\n<ul>\n<li>Least Recently Used (LRU)</li>\n<li>Least Frequently Used (LFU)</li>\n<li>First In First Out (FIFO)</li>\n<li>Last In First Out (LIFO) etc.</li>\n</ul>\n<blockquote>\n<p>There are only two hard things in computer science, Cache invalidation and naming things. — Phil Karlton</p>\n</blockquote>\n<p>In our design, we will use</p>\n<ul>\n<li><em>HashMap</em> to get and put data in O(1)</li>\n<li>Doubly linked list</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*enbSTt8WK0VFPxMCu9nJHw.png\">Cache implementation strategy<br>We are using doubly linked list to determine which key to delete and have the benefit of adding and deleting keys in O(1).</p>\n<p>Initially we will declare a model to store our key-value pair, hit count and reference node to point previous and next node.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheItem</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K key;    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> V value;    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hitCount = <span class=\"number\">0</span>; <span class=\"comment\">// LFU require this    </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CacheItem prev, next;    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CacheItem</span><span class=\"params\">(K key, V value)</span> </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;        \t\t</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;    </span><br><span class=\"line\">    &#125;        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementHitCount</span><span class=\"params\">()</span> </span>&#123;        </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hitCount++;    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"comment\">// getter / setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Now, we can outline our cache class with basic functionalities of get, put, delete and size.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cache</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;K, CacheItem&gt; map;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CacheItem first, last;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CAPACITY;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hitCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> missCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cache</span><span class=\"params\">(<span class=\"keyword\">int</span> capacity)</span> </span>&#123;</span><br><span class=\"line\">        CAPACITY = capacity;  <span class=\"comment\">// </span></span><br><span class=\"line\">        map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        deleteNode(map.get(key));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getHitCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hitCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMissCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> missCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>We also included hit count and miss count to determine the performance of our cache.</p>\n<p>Hit ratio = total hit / (total hit + total miss)</p>\n<p>For our put method</p>\n<ol>\n<li>If key already exists, update the value</li>\n<li>Otherwise, If size exceeds capacity</li>\n<li>Delete existing node using appropriate strategy</li>\n<li>Add new node in the top<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    CacheItem node = <span class=\"keyword\">new</span> CacheItem(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.containsKey(key) == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(size() &gt;= CAPACITY) &#123;</span><br><span class=\"line\">            deleteNode(first);        </span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">        addNodeToLast(node);    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    map.put(key, node);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>In our delete method</p>\n<ul>\n<li>Remove node from map</li>\n<li>Delete all references associated with that node.<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(CacheItem node)</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>) &#123;        </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last == node) &#123;        </span><br><span class=\"line\">        last = node.getPrev();    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first == node) &#123;        </span><br><span class=\"line\">        first = node.getNext();    </span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    map.remove(node.getKey());    </span><br><span class=\"line\">    node = <span class=\"keyword\">null</span>; <span class=\"comment\">// Optional, collected by GC    </span></span><br><span class=\"line\">    size--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>We can add node in the top. The last pointer will reference to the last inserted node.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addNodeToLast</span><span class=\"params\">(CacheItem node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last.setNext(node);</span><br><span class=\"line\">        node.setPrev(last);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    last = node;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>In our get method,</p>\n<ul>\n<li>Get data from map</li>\n<li>Increment the counter for that item. ( Useful for lease frequently used )</li>\n<li>Reorder the linked list.<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.containsKey(key) == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CacheItem node = (CacheItem) map.get(key);</span><br><span class=\"line\">    node.incrementHitCount();</span><br><span class=\"line\">    reorder(node);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (V) node.getValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Reorder is the key for this implementation. For different algorithm this reorder to delete method will change.</p>\n<h4 id=\"Least-Recently-Used-LRU\"><a href=\"#Least-Recently-Used-LRU\" class=\"headerlink\" title=\"Least Recently Used (LRU)\"></a>Least Recently Used (LRU)</h4><p>Delete candidate is the oldest used entry.</p>\n<ul>\n<li>The latest accessed node will be at the last end along with newly added items. In this way, we can delete from the first easily.<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reorder</span><span class=\"params\">(CacheItem node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last == node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first == node) &#123;</span><br><span class=\"line\">        first = node.getNext();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node.getPrev().setNext(node.getNext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    last.setNext(node);</span><br><span class=\"line\">    node.setPrev(last);</span><br><span class=\"line\">    node.setNext(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    last = node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Least-Frequently-Used-LFU\"><a href=\"#Least-Frequently-Used-LFU\" class=\"headerlink\" title=\"Least Frequently Used (LFU)\"></a>Least Frequently Used (LFU)</h4><p>Delete candidate is the least accessed entry.</p>\n<p>We have to sort items based on the frequency the nodes being accessed.</p>\n<p>To avoid getting deleted, for each accessed items needs to reach top based on their frequency.</p>\n<ul>\n<li>Iterated a loop, which swaps the node if the frequency is greater than it’s next node frequency.<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">reorder</span><span class=\"params\">(CacheItem node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last == node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CacheItem nextNode = node.getNext();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextNode.getHitCount() &gt; node.getHitCount()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first == node) &#123;</span><br><span class=\"line\">            first = nextNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.getPrev() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            node.getPrev().setNext(nextNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextNode.setPrev(node.getPrev());</span><br><span class=\"line\">        node.setPrev(nextNode);</span><br><span class=\"line\">        node.setNext(nextNode.getNext());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nextNode.getNext() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            nextNode.getNext().setPrev(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextNode.setNext(node);</span><br><span class=\"line\">        nextNode = node.getNext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.getNext() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>This way, there is an edge case where, after adding items that require delete from the start can cause deletion of the high frequency node.</p>\n<p>To solve this issue, we need to add nodes pointing our first node for least frequently accessed.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addNodeToFirst</span><span class=\"params\">(CacheItem node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(first != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        node.setNext(first);</span><br><span class=\"line\">        first.setPrev(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    first = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(last == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"First-In-First-Out-FIFO\"><a href=\"#First-In-First-Out-FIFO\" class=\"headerlink\" title=\"First In First Out (FIFO)\"></a>First In First Out (FIFO)</h4><p>Delete candidate is the first node.</p>\n<ul>\n<li>To add node we will use <em>addNodeToLast</em></li>\n<li>Reordering is not required.</li>\n<li>Delete node from first</li>\n</ul>\n<h4 id=\"Last-In-First-Out-LIFO\"><a href=\"#Last-In-First-Out-LIFO\" class=\"headerlink\" title=\"Last In First Out (LIFO)\"></a>Last In First Out (LIFO)</h4><p>Delete candidate is the last node.</p>\n<ul>\n<li>To add node we will use <em>addNodeToLast</em></li>\n<li>Reordering is not required.</li>\n<li>Delete node from last</li>\n</ul>\n<h3 id=\"Questions\"><a href=\"#Questions\" class=\"headerlink\" title=\"Questions:\"></a>Questions:</h3><ol>\n<li>We can use array /ArrayList to solve the same issue with simplified coding.</li>\n</ol>\n<p>Yes, it would be simpler. The aspects for not using,</p>\n<ul>\n<li>ArrayList has complexity of insertion and deletion of O(n) in worst case</li>\n<li>To search from there list, the worst case complexity would be O(n)</li>\n</ul>\n<ol start=\"2\">\n<li>We could have used the LinkedList instead of ArrayList.</li>\n</ol>\n<p>Once again, yes. LinkedList had the benefit for adding and removing node at O(1). The aspects for not using,</p>\n<ul>\n<li>We will still face the searching complexity of O(n)</li>\n</ul>\n<ol start=\"3\">\n<li>For LFU, we are having a complexity of O(n) in reordering method.</li>\n</ol>\n<p>Yes, unfortunately.</p>\n<ul>\n<li>I’m reordering here after each get request, which increases the complexity for each get. For post heavy system, this approach will benefit.</li>\n<li>It can be done at the moment of deletion. This way the complexity will increase at the time of putting data. For get heavy system, this approach will benefit more.</li>\n</ul>\n<p>I have came up a solution with this so far. Please suggest any better idea.</p>\n<ol start=\"4\">\n<li>We are using HashMap. It can have the issue of hash collision. Then the performance will not be O(1) as mentioned.</li>\n</ol>\n<p>Absolutely.</p>\n<ul>\n<li>It’s always recommended to use better hash function that cause less collision.</li>\n<li>Make sure our load factor remains 0.75 or less.</li>\n<li>If the load factor is more than default or provided one, from Java 8 HashMap automatically increase the size and rehash the full structure.</li>\n<li>From Java 8, the collision also being handled by using balanced tree to obtain O(log n) performance.</li>\n</ul>\n<p>I’ve written a post with implementation and explanation <a href=\"https://medium.com/swlh/hashmap-implementation-for-java-90a5f58d4a5b\">HashMap Implementation for Java</a>.</p>\n<ol start=\"5\">\n<li>Is this implementation thread safe?</li>\n</ol>\n<p>No. To be thread safe</p>\n<ul>\n<li>We can use <em>ConcurrentHashMap</em> instead of <em>HashMap</em></li>\n<li>Use synchronized block</li>\n</ul>\n<ol start=\"6\">\n<li>How to add time based eviction strategy to auto delete items?</li>\n</ol>\n<p>No. To implement this, we need to run a timer thread to define which items are eligible for eviction and perform deletion operation.</p>\n","categories":["Java"],"tags":["java","cache"]},{"title":"Find pair of numbers in an array with a given sum","url":"/2020/08/21/find-pair-of-numbers-in-an-array-with-a-given-sum/","content":"<p>There are multiple ways to find the pair of numbers in a given array. The numbers in the array can be in two ways.</p>\n<ol>\n<li>Sorted</li>\n<li>Unsorted</li>\n</ol>\n<p>If the numbers are sorted then we can get easily with the complexity of O(n). The brute force approach will be easily applicable for both the sorted and unsorted array of numbers.</p>\n<h3 id=\"Brute-force\"><a href=\"#Brute-force\" class=\"headerlink\" title=\"Brute force:\"></a>Brute force:</h3><p>Brute force approach will check each and every number to determine if it equals to the given sum. The complexity of this approach is O(n²).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i] + array[j] == sum) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// The pair is &#123; array[i], array[j] &#125;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sorted\"><a href=\"#Sorted\" class=\"headerlink\" title=\"Sorted:\"></a>Sorted:</h3><p>In this approach, we need to sort the unsorted array(if needed). In this case, the complexity depends on the complexity of the sorting algorithm. If we choose a sorting algorithm of complexity O(n) we can solve this problem in O(n) complexity.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// any sort method can be used.</span></span><br><span class=\"line\">    Arrays.sort(array);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pairSum = array[i] + array[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pairSum == sum) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The pair is &#123; array[i], array[j] &#125;</span></span><br><span class=\"line\">            <span class=\"comment\">// if we want to continue i++ otherwise break</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pairSum &gt; sum) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hash-Flag\"><a href=\"#Hash-Flag\" class=\"headerlink\" title=\"Hash / Flag:\"></a>Hash / Flag:</h3><p>In this approach, we can get the pairs in O(n) complexity. We can use hashmap or flag array to set counter for each value and check using negation from the given sum.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findPair</span><span class=\"params\">(<span class=\"keyword\">int</span>[] array, <span class=\"keyword\">int</span> sum)</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        map.put(array[i], map.getOrDefault(array[i], <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.containsKey(sum - array[i])) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The pair is &#123; array[i], sum - array[i] &#125;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>In this way, we will get the pairs twice. Because in each occurrence it will check with the hashmap and make a pair. We can add a set to get unique pairs.</p>\n<h3 id=\"Metrics\"><a href=\"#Metrics\" class=\"headerlink\" title=\"Metrics:\"></a>Metrics:</h3><p>I tried to run these to get some metrics. Sharing those might help to get some understanding.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"center\">10000</th>\n<th align=\"center\">100000</th>\n<th align=\"center\">1000000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Brute force</td>\n<td align=\"center\">22ms</td>\n<td align=\"center\">1453ms</td>\n<td align=\"center\">Too long</td>\n</tr>\n<tr>\n<td align=\"left\">Sorted O(n log(n))</td>\n<td align=\"center\">4ms</td>\n<td align=\"center\">20ms</td>\n<td align=\"center\">293ms</td>\n</tr>\n<tr>\n<td align=\"left\">Hashmap</td>\n<td align=\"center\">8ms</td>\n<td align=\"center\">44ms</td>\n<td align=\"center\">276ms</td>\n</tr>\n</tbody></table>\n","categories":["Leetcode"],"tags":["java","array","number theory"]},{"title":"HashMap Implementation for Java","url":"/2020/08/18/hashmap-implementation-for-java/","content":"<p>HashMap is a dictionary data structure provided by java. It’s a Map-based collection class that is used to store data in Key &amp; Value pairs. In this article, we’ll be creating our own hashmap implementation.</p>\n<p>The benefit of using this data structure is faster data retrieval. It has data access complexity of O(1) in the best case.<br><img src=\"/content/images/2021/03/1.png\" alt=\"Image for post\"><br>In layman’s terms, a for each key we get the associated value.</p>\n<p>To implement this structure,</p>\n<ol>\n<li>We need a list to store all the keys</li>\n<li>Key — Value relationship to get value based on key</li>\n</ol>\n<p>We can have a list containing all the key, values and to access we need to search all of it.</p>\n<p>But the main point of hash map is to access the keys faster in 0(1) access time.</p>\n<p>Here, hashing comes into play. We can hash the key and relate it with the index to retrieve data faster.</p>\n<p>Hash comes with a problem too, collision. It is always recommended to use a better hash function that can reduce chances of collision.<br><img src=\"/content/images/2021/03/2.png\" alt=\"Image for post\"><br>Multiple hash can have same hash key. For that reason, there is a bucket or container for each key where all the values are store if collision occurs.</p>\n<p>Let’s dive into a basic implementation of our hashmap.</p>\n<p>Firstly, we need an array to store all the keys, a bucket model to store all the entry and a wrapper for our key, value pair.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyKeyValueEntry</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> K key;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> V value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyKeyValueEntry</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;    <span class=\"comment\">// getters &amp; setters</span></span><br><span class=\"line\">    <span class=\"comment\">// hashCode &amp; equals</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Bucket to store all the key values</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMapBucket</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;MyKeyValueEntry&gt; entries;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyMapBucket</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(entries == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            entries = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;MyKeyValueEntry&gt; <span class=\"title\">getEntries</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entries;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addEntry</span><span class=\"params\">(MyKeyValueEntry entry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entries.add(entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeEntry</span><span class=\"params\">(MyKeyValueEntry entry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entries.remove(entry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Lastly, implementation of our hashmap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHashMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyMapBucket[] bucket;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bucket = <span class=\"keyword\">new</span> MyMapBucket[CAPACITY];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getHash</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (key.hashCode() &amp; <span class=\"number\">0xfffffff</span>) % CAPACITY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> MyKeyValueEntry <span class=\"title\">getEntry</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = getHash(key);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bucket[hash].getEntries().size(); i++) &#123;</span><br><span class=\"line\">            MyKeyValueEntry myKeyValueEntry = bucket[hash].getEntries().get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(myKeyValueEntry.getKey().equals(key)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> myKeyValueEntry;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(containsKey(key)) &#123;</span><br><span class=\"line\">            MyKeyValueEntry entry = getEntry(key);</span><br><span class=\"line\">            entry.setValue(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hash = getHash(key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bucket[hash] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bucket[hash] = <span class=\"keyword\">new</span> MyMapBucket();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bucket[hash].addEntry(<span class=\"keyword\">new</span> MyKeyValueEntry&lt;&gt;(key, value));</span><br><span class=\"line\">            size++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> containsKey(key) ? (V) getEntry(key).getValue() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsKey</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash = getHash(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !(Objects.isNull(bucket[hash]) || Objects.isNull(getEntry(key)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(K key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(containsKey(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hash = getHash(key);</span><br><span class=\"line\">            bucket[hash].removeEntry(getEntry(key));</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>Put into map:</strong></p>\n<ol>\n<li>If key already exists, then update value of that key.</li>\n<li>Otherwise, add an entry to the bucket.</li>\n</ol>\n<p><strong>Get from map:</strong></p>\n<ol>\n<li>Check if the key exists, and return data.</li>\n</ol>\n<p><strong>Contains:</strong></p>\n<ol>\n<li>Check if the bucket is null</li>\n<li>If not, then the bucket contains the key.</li>\n</ol>\n<p><strong>Performance:</strong></p>\n<p>It has the performance of O(1) in best case and O(n) in worst case.</p>\n<p><strong>Java Improvement:</strong></p>\n<ol>\n<li>From Java version 8, All of the hashing based Map implementations: HashMap, Hashtable, LinkedHashMap, WeakHashMap and ConcurrentHashMap are modified to use an enhanced hashing algorithm for string keys when the capacity of the hash table has ever grown beyond 512 entries. The enhanced hashing implementation uses the murmur3 hashing algorithm along with random hash seeds and index masks. These enhancements mitigate cases where colliding String hash values could result in a performance bottleneck. <a href=\"https://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/43bd5ee0205e\">Alternative String hashing implementation</a></li>\n<li>From Java version 8, once the number of items in a hash bucket grows beyond a certain threshold, that bucket will switch from using a linked list of entries to a balanced tree. In the case of high hash collisions, this will improve worst-case performance from O(n) to O(log n). <a href=\"https://openjdk.java.net/jeps/180\">Handle Frequent HashMap Collisions with Balanced Trees</a>.</li>\n</ol>\n<p><strong>Java Hashmap features:</strong></p>\n<ul>\n<li><p>The default initial capacity is 16</p>\n<p>  static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</p>\n</li>\n<li><p>The load factor used when none specified in constructor.</p>\n<p>  static final float DEFAULT_LOAD_FACTOR = 0.75f;</p>\n</li>\n<li><p>The bin count threshold for using a tree rather than list for a bin. Bins are converted to trees when adding an element to a bin with at least this many nodes.</p>\n<p>  static final int TREEIFY_THRESHOLD = 8;</p>\n</li>\n<li><p>The bin count threshold for untreeifying a (split) bin during a resize operation.</p>\n<p>  static final int UNTREEIFY_THRESHOLD = 6;</p>\n</li>\n<li><p>An instance of HashMap has two parameters that affect its performance: <em>initial capacity</em> and <em>load factor</em>. </p>\n</li>\n</ul>\n<ul>\n<li>The <em>capacity</em> is the number of buckets in the hash table, and </li>\n<li>the initial capacity is simply the capacity at the time the hash table is created.<br>The <em>load factor</em>s a measure of how full the hash table is allowed to get before its capacity is automatically increased.<br>When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is <em>rehashed</em> (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.</li>\n</ul>\n<ul>\n<li>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. </li>\n</ul>\n<ul>\n<li>Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the HashMap class, including get and put).<br>The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. </li>\n<li>If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur.</li>\n</ul>\n","categories":["Java"],"tags":["java","hashmap"]},{"title":"Product of Array Except Self","url":"/2020/08/16/product-of-array-except-self/","content":"<p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>\n<p><strong>Example:</strong></p>\n<p><strong>Input:</strong><code>[1,2,3,4]</code><br><strong>Output:</strong><code>[24,12,8,6]</code></p>\n<p>Problem link: <a href=\"https://leetcode.com/problems/product-of-array-except-self\">Product of Array Except Self</a></p>\n<p>Solution:</p>\n<p>Let’s start with a brute-force solution.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] productExceptSelf(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i == j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mul *= nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i] = mul;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Clearly, this is not an efficient solution and the time complexity for this solution is O(n²)</p>\n<p>We can improve the implementation using the help of division. We can get the total multiplication value and for each element we divide the item.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] productExceptSelf(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        mul *= nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        nums[i] = mul / nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This solution seems okay. But we missed an important edge case here. The existence of zero(0). If there is any input 0, it will cause division by zero exception.</p>\n<p>To solve the division by zero exception, we can think of two use cases</p>\n<ol>\n<li>One 0 exists in the input</li>\n<li>0 exists more than once.</li>\n</ol>\n<p>For the use case for 0 existing more than once, we can easily define the result array will have all zeroes inside.</p>\n<p>But, if we have only one 0, then we will only get output for that item only.</p>\n<p><strong>Input:</strong><code>[1,2,0,4,5]</code><br><strong>Output:</strong><code>[0,0,40,0,0]</code></p>\n<p>we can solve the problem using zero counter easily.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] productExceptSelf(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>, countZero = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            countZero++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mul *= nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(countZero &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(countZero &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] == <span class=\"number\">0</span>) nums[i] = mul;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> nums[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nums[i] = mul / nums[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>There is a note in the problem</p>\n<p>**Note: **Please solve it <strong>without division</strong> and in O(<em>n</em>).</p>\n<p>To solve without division, we first need to find pattern of the problem. Let’s find it with provided example input.</p>\n<p><strong>Input:</strong><code>[1,2,3,4]</code><br><strong>Output:</strong><code>[24,12,8,6]</code></p>\n<p>We can distribute the input in left and right section, so that we can multiply left and right to get our result.</p>\n<pre><code>Index: 0\nNums[Index] = 1 (default)\nLeft[Index] = 1\nRight[Index] = 2 * 3 * 4 = 24\nResult[Index] = Left[Index] * Right[Index] = 1 * 24 = 24\n\nIndex: 1\nNums[Index] = 2\nLeft[Index] = 1\nRight[Index] = 3 * 4 = 12\nResult[Index] = Left[Index] * Right[Index] = 1 * 12 = 12\n\nIndex: 2\nNums[Index] = 3\nLeft[Index] = 1 * 2 = 2\nRight[Index] = 4\nResult[Index] = Left[Index] * Right[Index] = 4 * 2 = 8\n\nIndex: 3\nNums[Index] = 4\nLeft[Index] = 1 * 2 * 3 = 6\nRight[Index] = 1 (default)\nResult[Index] = Left[Index] * Right[Index] = 6 * 1 = 6\n</code></pre>\n<p>To generate our left array</p>\n<pre><code>left[i] = left[i - 1] * hums[i - 1]\n</code></pre>\n<p>And our right array</p>\n<pre><code>right[i] = right[i + 1] * hums[i + 1]\n</code></pre>\n<p>So, our solution will be</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] productExceptSelf(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    left[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        left[i] = left[i - <span class=\"number\">1</span>] * nums[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    right[nums.length - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = nums.length - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        right[i] = right[i + <span class=\"number\">1</span>] * nums[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        nums[i] = left[i] * right[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Please share any other better solution for this problem.</p>\n","categories":["Leetcode"],"tags":["java","array"]}]